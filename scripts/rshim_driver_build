#!/bin/sh

#
# Usage:
# 1. Update <workspace>/rshim git repo to latest
# 2. Generate source RPM
#    cd <workspace>/build; make rshim/stamp_srpm
# 3. Move the source RPM and source code to the target location
#    rm /net/farm-0043/scratch/build/install/distro/SRPMS/*
#    cp <generated_rshim_src_rpm> /net/farm-0043/scratch/build/install/distro/SRPMS/
#    rm -rf /net/farm-0043/scratch/build/install/src/drivers/rshim
#    cp -r <clear_rshim_src>  /net/farm-0043/scratch/build/install/src/drivers/rshim
#    rm -rf /net/farm-0043/scratch/build/install/src/drivers/rshim/.git
# 4. Start the build
#   ./rshim_driver_build /net/farm-0043/scratch/build
# 5. Check final build under /auto/sw_mc_soc_release/packages/
#

SRC_DIR=$1
DEST_HOST=mtl-stm-az-119
UBUNTU_HOST_X64=bu-kvm01-004
UBUNTU_HOST_ARM64=mtbu-softiron2
CENTOS_HOST_ARM64=dev-doca-arm1
DEST_DIR=/home/scratch/pgeng/test-rshims
SSH_OPT="StrictHostKeyChecking no"
SSH_EXTRA_ARG="-oHostKeyAlgorithms=+ssh-dss"

#
# Build rshim RPM
#
tmp_dir=$(mktemp -d -t ci-XXXXXXXXXX)
mkdir -p ${tmp_dir}/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
name=$(basename ${SRC_DIR}/install/distro/SRPMS/rshim-*.src.rpm .src.rpm)
src_rpm=${SRC_DIR}/install/distro/SRPMS/${name}.src.rpm
if [ ! -e "${src_rpm}" ]; then
  echo "${src_rpm} not found"
  rm -rf ${tmp_dir}
  exit
fi
rpmbuild --define "_topdir ${tmp_dir}" --rebuild ${src_rpm}
bin_rpm=$(echo ${tmp_dir}/RPMS/x86_64/${name}*.rpm)
if [ ! -f "${bin_rpm}" ]; then
  echo "Failed to generate ${bin_rpm}"
  rm -rf ${tmp_dir}
  exit
fi

# Upload rpm, source rpm and source tarball.
cp -r ${SRC_DIR}/install/src/drivers/rshim ${tmp_dir}/
cd ${tmp_dir}; tar zcvf ${name}.tar.gz rshim >/dev/null; cd -
scp ${src_rpm} ${bin_rpm} ${tmp_dir}/${name}.tar.gz \
  sw_mc_soc_release@${DEST_HOST}:${DEST_DIR}
ssh -o "${SSH_OPT}" sw_mc_soc_release@${DEST_HOST} \
  "cd ${DEST_DIR}; ln -sf $(basename ${bin_rpm}) rshim-latest.rpm"
ssh -o "${SSH_OPT}" sw_mc_soc_release@${DEST_HOST} \
  "cd ${DEST_DIR}; ln -sf $(basename ${name}.tar.gz) rshim-latest.tar.gz"
ssh -o "${SSH_OPT}" sw_mc_soc_release@${DEST_HOST} \
  "cd ${DEST_DIR}; ln -sf $(basename ${src_rpm}) rshim-latest.src.rpm"

rm -rf ${tmp_dir}

ssh ${SSH_EXTRA_ARG} ${CENTOS_HOST_ARM64} "mkdir rshim 2>/dev/null"
scp ${SSH_EXTRA_ARG} ${src_rpm} ${CENTOS_HOST_ARM64}:rshim/
ssh ${SSH_EXTRA_ARG} ${CENTOS_HOST_ARM64} rpmbuild --rebuild rshim/$(basename ${src_rpm})
bin_rpm=$(basename ${src_rpm})
bin_rpm=${bin_rpm::-8}.el7.aarch64.rpm
ssh ${SSH_EXTRA_ARG} -o "${SSH_OPT}" ${CENTOS_HOST_ARM64} \
  scp rpmbuild/RPMS/aarch64/${bin_rpm} \
  sw_mc_soc_release@${DEST_HOST}:${DEST_DIR}
symlink=rshim-aarch64-latest.rpm
ssh -o "${SSH_OPT}" sw_mc_soc_release@${DEST_HOST} \
  "cd ${DEST_DIR}; ln -sf ${bin_rpm} ${symlink}"

#
# Build .deb package
#
# Get source
for UBUNTU_HOST in $UBUNTU_HOST_X64 $UBUNTU_HOST_ARM64; do
  tmp_dir=$(ssh -o "${SSH_OPT}" ${UBUNTU_HOST} mktemp -d -t ci-XXXXXXXXXX)
  ssh -o "${SSH_OPT}" ${UBUNTU_HOST} cp -r ${SRC_DIR}/install/src/drivers/rshim \
    ${tmp_dir}/

  # Patch the git-hash
  githash="${name##*.}"
  ssh -o "${SSH_OPT}" ${UBUNTU_HOST} sed -i \"1s/\)/\.${githash}\)/g\" \
    ${tmp_dir}/rshim/debian/changelog

  # Build
  ssh -o "${SSH_OPT}" ${UBUNTU_HOST} "cd ${tmp_dir}/rshim; echo y | \
    debuild -us -uc"

  # Upload .deb
  bin_deb=$(ssh -o "${SSH_OPT}" ${UBUNTU_HOST} echo ${tmp_dir}/*.deb)
  ssh -o "${SSH_OPT}" ${UBUNTU_HOST} scp ${tmp_dir}/*.deb \
    sw_mc_soc_release@${DEST_HOST}:${DEST_DIR}
  if [ "${UBUNTU_HOST}" = "$UBUNTU_HOST_X64" ]; then
    symlink=rshim-latest.deb
  else
    symlink=rshim-aarch64-latest.deb
  fi
  ssh -o "${SSH_OPT}" sw_mc_soc_release@${DEST_HOST} \
    "cd ${DEST_DIR}; ln -sf $(basename ${bin_deb}) ${symlink}"

  ssh -o "${SSH_OPT}" ${UBUNTU_HOST} rm -rf ${tmp_dir}
done
